import React, { useState } from 'react'
import { View, Text, StyleSheet, Alert } from 'react-native'
import { TouchableOpacity, TextInput } from 'react-native-gesture-handler'
import Colors from '../constants/colors'
import { useAuth } from '../contexts/authContext'
import api from '../services/api'
import AsyncStorage from '@react-native-community/async-storage';
import PushNotification, {PushNotificationObject} from 'react-native-push-notification'
const login: React.FC = () => {
    const [myUser, setMyUser] = useState('')
    const { login } = useAuth()

    const test = () => {

        PushNotification.localNotification({
            /* Android Only Properties */
            id: "0", // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
            ticker: "My Notification Ticker", // (optional)
            autoCancel: true, // (optional) default: true
            largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
            smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
            bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
            subText: "This is a subText", // (optional) default: none
            color: "red", // (optional) default: system default
            vibrate: true, // (optional) default: true
            vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
            tag: "some_tag", // (optional) add tag to message
            group: "group", // (optional) add group to message
            ongoing: false, // (optional) set whether this is an "ongoing" notification
            priority: "high", // (optional) set notification priority, default: high
            visibility: "private", // (optional) set notification visibility, default: private
            importance: "high", // (optional) set notification importance, default: high
            //allowWhileIdle: false, // (optional) set notification to work while on doze, default: false
            //ignoreInForeground: false, // (optional) if true, the notification will not be visible when the app is in the foreground (useful for parity with how iOS notifications appear)
           
            /* iOS only properties */
            alertAction: "view", // (optional) default: view
            category: "", // (optional) default: empty string
            userInfo: {}, // (optional) default: {} (using null throws a JSON value '<null>' error)
           
            /* iOS and Android properties */
            title: "My Notification Title", // (optional)
            message: "My Notification Message", // (required)
            playSound: true, // (optional) default: true
            soundName: "default", // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
            //number: 10, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
            //repeatType: "day", // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
            //actions: '["Yes", "No"]', // (Android only) See the doc for notification actions to know more
          });
    }

    const enter = async () => {
        try {
            if (!myUser)
                return Alert.alert('Informe um nome de usu√°rio')

            const res = await api.post('token', { id: myUser })
            
            const user = {id: res.data.token, name: res.data.identity}
            login(user)

        } catch (error) {
            console.log(error)
        }
    }

    return (
        <View style={styles.container}>
            <Text style={styles.label}>User Name</Text>
            <TextInput style={styles.input}
                placeholder={'User name'}
                placeholderTextColor={Colors.gray}
                onChangeText={(txt) => setMyUser(txt)}
            />
            <TouchableOpacity onPress={enter} style={styles.btn}>
                <Text style={styles.btnLabel}>Enter</Text>
            </TouchableOpacity>
        </View>
    )
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: 'flex-start',
        paddingHorizontal: 20,
        backgroundColor: Colors.background
    },
    label: {
        marginTop: '50%',
        color: Colors.primary,
        margin: 5,
        fontWeight: 'bold'
    },
    input: {
        width: '100%',
        height: 40,
        borderRadius: 10,
        paddingHorizontal: 20,
        backgroundColor: Colors.dark,
        color: Colors.primary

    },
    btn: {
        marginTop: 20,
        marginHorizontal: 40,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: Colors.dark,
        height: 40,
        borderRadius: 10

    },
    btnLabel: {
        color: Colors.primary,
        fontWeight: 'bold',

    }
})

export default login